# Mendel's Accountant default input file
# This is in TOML format (https://github.com/naoina/toml)

[basic]
                      case_id = "case00"   # identify the run - not used for anything important yet
                     pop_size = 10000      # initial or fixed population size. For tribes/parralel runs (not currently supported) this is the size of each tribe
              num_generations = 200     # the number of generations to run the simulation for

[mutations]
                    mutn_rate = 10.0    # total new mutations per individual per generation
              mutn_rate_model = "poisson"   # fixed (mutn_rate rounded to int), or poisson
                frac_fav_mutn = 0.001   # fraction of total number of mutations that are favorable
             fraction_neutral = 0.0     # fraction of total number of mutations that are neutral
                  genome_size = 0.3E+09     # number of functional nucleotides in 1 set/half of chromosomes. Used to set certain other factors, like the weibull fitness effect.
         fitness_effect_model = "uniform"    # fixed (set uniform_fitness_effect_*), uniform (even distribution), or weibull.
   uniform_fitness_effect_del = 0.0001   # specifies all deleterious mutations should have the same effect. Only used if fitness_effect_model=fixed.
   uniform_fitness_effect_fav = 0.0001   # specifies all favorable mutations should have the same effect. Only used if fitness_effect_model=fixed.
    high_impact_mutn_fraction = 0.01    # not currently supported
   high_impact_mutn_threshold = 0.01    # not currently supported
         max_fav_fitness_gain = 0.1     # the fitness gain of each favorable mutation will range between 0 and this number. Used in weibull fitness effect distribution.
           fraction_recessive = 0.5     # determines how many mutations are recessive vs. dominant
  recessive_hetero_expression = 0.1     # the fraction of recessive mutations that are expressed.
   dominant_hetero_expression = 0.9     # the fraction of dominant mutations that are expressed.
     multiplicative_weighting = 0.0     # if 0.0 combine mutations additively, if 1.0 combine mutations multiplicatively (not currently supported), if inbetween partially combine mutation fitness multiplicatively as well as additively (not currently supported)
        synergistic_epistasis = false   # if true, mutations on the same linkage blocks have more than additive effect - not currently supported
         se_nonlinked_scaling = 0.0     # not currently supported
            se_linked_scaling = 0.0     # not currently supported
         num_initial_fav_mutn = 0       # the number of favorable mutations initially in population 0 - not currently supported
             upload_mutations = false   # give generation 0 an initial set of mutations - not currently supported
              allow_back_mutn = false   # allow existing mutated nucleotide sites to be mutated again - not currently supported
        polygenic_beneficials = false   # not currently supported
               polygenic_init = "AAAAAA"    # not currently supported
             polygenic_target = "TCGTCG"    # not currently supported
             polygenic_effect = 0.001   # not currently supported

[selection]
        fraction_random_death = 0.0     # not currently supported. This can also be accomplished by proportionally reducing the reproductive_rate
  fitness_dependent_fertility = false   # if true, make fertility decline with fitness decline - not currently supported
             selection_model = "fulltrunc"       # fulltrunc (full truncation), ups (unrestricted probability selection), spps (strict proportionality probability selection), partialtrunc (partial truncation selection) - not currently supported
                 heritability = 1.0     # used in every selection_model, what percentage effect the fitness from mutations should have on selection (the rest is chance), but this value is multiplied by the fitness variance, which is quite small
            non_scaling_noise = 0.2    # used in every selection_model, how much random chance affects selection, in a way that does not scale with fitness
     partial_truncation_value = 0.5     # used in selection_model==4, not currently supported

[population]
            reproductive_rate = 2.0     # how many offspring per individual (times 2 for both parents). This combined with fraction_random_death determines the average num of offspring
          num_offspring_model = "fixed"  # uniform (even distribution), fixed (rounded to int), fortran (what mendel-f90 used), or fitness (weighted according to fitness - not currently supported)
          recombination_model = 3      # clonal = 1, suppressed = 2, full_sexual = 3 (only currently supporting 3)
  fraction_self_fertilization = 0.0     # hermaphroditic, used for recombination_model 2 and 3 - not currently supported
      num_contrasting_alleles = 0       # number of initial contrasting alleles, to start the pop with pre-existing diversity - not currently supported
   max_total_fitness_increase = 0       # used with num_contrasting_alleles - not currently supported
     initial_alleles_pop_frac = 1.0     # used with num_contrasting_alleles - not currently supported
   initial_alleles_amp_factor = 1000    # used with num_contrasting_alleles - not currently supported
              dynamic_linkage = true    # if true, each LB inherited independently, not affected by neighbors?? - not currently supported
    haploid_chromosome_number = 23      # number of chromosomes in 1 set/half (e.g. in a gamete) - not currently supported
         num_linkage_subunits = 69      # total number of linkage blocks in 1 half of an individual's genome. Should be a multiple of num chromosomes. 989 = 43 * 23
             pop_growth_model = 0       # 0 (no pop growth), 1 (exponential growth model), 2 (carrying-capacity model) - not currently supported
              pop_growth_rate = 0.0     # growth rate each generation (e.g. 1.05 is 5% increase), used for pop_growth_model==1. In this case the num_generations parameter means max pop size. Not currently supported.
            carrying_capacity = 1000    # used for pop_growth_model==2 - not currently supported
               bottleneck_yes = false   # an event like the flood - not currently supported
        bottleneck_generation = 0       # not currently supported
          bottleneck_pop_size = 0       # not currently supported
   num_bottleneck_generations = 0       # not currently supported

[substructure]
                  is_parallel = false   # not currently supported
            homogenous_tribes = true    # not currently supported
          num_indiv_exchanged = 1       # not currently supported
        migration_generations = 10      # not currently supported
              migration_model = 1       # not currently supported
           tribal_competition = false   # not currently supported
               tribal_fission = false   # not currently supported
            tc_scaling_factor = 0.0     # not currently supported
           group_heritability = 0.0     # not currently supported
          social_bonus_factor = 1.0     # not currently supported

[computation]
           tracking_threshold = 1.0     # Below this fitness effect value, near neutral mutations will be pooled into the cumulative fitness of the LB, instead of tracked individually. This saves on memory and computation time. Not currently supported.
               track_neutrals = false   # if false, only keep a cumulative count in each LB
         extinction_threshold = 0.0     # If the tribe or population fitness falls below this value, consider it extinct and stop the simulation - not currently supported
       max_del_mutn_per_indiv = 10000   # if this number is reached, stop execution - not currently supported
       max_neu_mutn_per_indiv = 100     # if this number is reached, stop execution - not currently supported
       max_fav_mutn_per_indiv = 100     # if this number is reached, stop execution - not currently supported
           random_number_seed = 42      # If random_number_seed==0 we use a truly random seed, otherwise it will use the same sequence each run
                   reseed_rng = false   # not used - can we delete this parameter??
                   write_dump = false   # use files_to_output instead
                    write_vcf = false   # use files_to_output instead
                 restart_case = false   # if true, read restart file and continue run - not currently supported
          restart_dump_number = 0       # fortran file number for restart dump file - not currently supported
             plot_allele_gens = 100     # perform a polymorphism analysis of allele frequencies (computationally expensive) every n generations - not currently supported
                    verbosity = 2      # higher number means more verbose, 9 is essentially debug
               data_file_path = "./test/output/defaults"     # where the output files should go. Will create this directory if necessary
              files_to_output = "mendel.hst"        # list of files (separated by commas) that should be generated. The filenames have fixed meanings.
