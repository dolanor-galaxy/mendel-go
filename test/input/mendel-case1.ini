# Mendel's Accountant input file
# This is in TOML format (https://github.com/BurntSushi/toml)

[basic]
                      case_id = "case001"   # identify the run - not used for anything important yet
                     pop_size = 4      # initial or fixed population size. For tribes/parralel runs (not currently supported) this is the size of each tribe
              num_generations = 4     # the number of generations to run the simulation for
#                     pop_size = 500      # initial or fixed population size. For tribes/parralel runs (not currently supported) this is the size of each tribe
#              num_generations = 20     # the number of generations to run the simulation for
#                     pop_size = 10000      # initial or fixed population size. For tribes/parralel runs (not currently supported) this is the size of each tribe
#              num_generations = 200     # the number of generations to run the simulation for

[mutations]
#              mutn_rate_model = "poisson"   # fixed (mutn_rate rounded to int), or poisson
              mutn_rate_model = "poisson"   # fixed (mutn_rate rounded to int), or poisson
#                frac_fav_mutn = 0.1   # fraction of total number of mutations that are favorable
#             fraction_neutral = 0.05     # fraction of total number of mutations that are neutral
#             fraction_neutral = 0.0     # fraction of total number of mutations that are neutral
         fitness_effect_model = "weibull"    # fixed (set uniform_fitness_effect_*), uniform (even distribution with uniform_fitness_effect_* as max), or weibull. The parameter fitness_distrib_type was previously used for this.
   uniform_fitness_effect_del = 0.0001   # for fitness_effect_model=fixed specifies all deleterious mutations should have the same effect. For fitness_effect_model=uniform the fitness effect is between 0 and this number.
   uniform_fitness_effect_fav = 0.0001   # for fitness_effect_model=fixed specifies all deleterious mutations should have the same effect. For fitness_effect_model=uniform the fitness effect is between 0 and this number.
           fraction_recessive = 0.5     # determines how many mutations are recessive vs. dominant
  recessive_hetero_expression = 0.1     # the fraction of recessive mutations that are expressed.
   dominant_hetero_expression = 0.9     # the fraction of dominant mutations that are expressed.
#  recessive_hetero_expression = 1.0     # the fraction of recessive mutations that are expressed.
#   dominant_hetero_expression = 1.0     # the fraction of dominant mutations that are expressed.

[selection]
              selection_model = "fulltrunc"       # fulltrunc (full truncation), ups (unrestricted probability selection), spps (strict proportionality probability selection - not supported), partialtrunc (partial truncation selection - not supported)
                 heritability = 0.2     # used in every selection_model, what percentage effect the fitness from mutations should have on selection (the rest is chance), but this value is multiplied by the fitness variance, which is quite small
            non_scaling_noise = 0.2    # used in every selection_model, how much random chance affects selection, in a way that does not scale with fitness
#             selection_model = "ups"       # fulltrunc (full truncation), ups (unrestricted probability selection), spps (strict proportionality probability selection - not supported), partialtrunc (partial truncation selection - not supported)
#                 heritability = 0.2     # used in every selection_model, what percentage effect the fitness from mutations should have on selection (the rest is chance), but this value is multiplied by the fitness variance, which is quite small
#            non_scaling_noise = 0.05    # used in every selection_model, how much random chance affects selection, in a way that does not scale with fitness

[population]
            reproductive_rate = 2.0     # how many offspring per individual (times 2 for both parents). This combined with fraction_random_death determines the average num of offspring
#            reproductive_rate = 1.0     # how many offspring per individual (times 2 for both parents). This combined with fraction_random_death determines the average num of offspring
          num_offspring_model = "fixed"  # uniform (even distribution), fixed (rounded to int), fortran (what mendel-f90 used), or fitness (weighted according to fitness - not currently supported)
              crossover_model = "partial"  # none (no crossover), full (each LB has a 50/50 chance of coming from dad or mom), partial (mean_num_crossovers per chromosome)
          mean_num_crossovers = 2       # only used for crossover_model=partial, the average number of crossovers per chromosome
    haploid_chromosome_number = 23      # number of chromosomes in 1 set/half (e.g. in a gamete)
#         num_linkage_subunits = 230      # total number of linkage blocks in 1 half of an individual's genome. Must be a multiple of num chromosomes. 989 = 43 * 23
         num_linkage_subunits = 989      # total number of linkage blocks in 1 half of an individual's genome. Must be a multiple of num chromosomes. 989 = 43 * 23
#    haploid_chromosome_number = 2      # number of chromosomes in 1 set/half (e.g. in a gamete)
#         num_linkage_subunits = 8      # total number of linkage blocks in 1 half of an individual's genome. Must be a multiple of num chromosomes. 989 = 43 * 23

[computation]
#           tracking_threshold = 1.0     # below this fitness effect value, near neutral mutations will be pooled into the cumulative fitness of the LB, instead of tracked individually. This saves on memory and computation time, but some stats will not be available.
           tracking_threshold = 0.0     # below this fitness effect value, near neutral mutations will be pooled into the cumulative fitness of the LB, instead of tracked individually. This saves on memory and computation time, but some stats will not be available.
#               track_neutrals = false   # if false, only keep a cumulative count of neutral mutations in each LB
               track_neutrals = true   # if false, only keep a cumulative count of neutral mutations in each LB
           random_number_seed = 42      # If random_number_seed==0 we use a truly random seed, otherwise it will use the same sequence each run
                    verbosity = 2      # higher number means more verbose, 9 is essentially debug
               data_file_path = "./test/output/case1"     # where the output files should go. Will create this directory if necessary
#              files_to_output = "mendel.hst"        # list of files (separated by commas) that should be generated. The filenames have fixed meanings.
              files_to_output = "mendel.hst,alleles.json"        # list of files (separated by commas) that should be generated. The filenames have fixed meanings.
             plot_allele_gens = 2     # output allele frequencies every n generations. If set to 0, output once at the end of the run.
          performance_profile = ""       # empty string, cpu, mem, or block
      transfer_linkage_blocks = true    # temporary setting - true: when possible transfer ownership of LB to child instead of copying it
#      transfer_linkage_blocks = false    # temporary setting - true: when possible transfer ownership of LB to child instead of copying it
